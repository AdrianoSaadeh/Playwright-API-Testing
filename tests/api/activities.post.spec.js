import { test, expect } from "@playwright/test";

test.describe("Validations for the POST /api/v1/Activities endpoint", () => {

    test("Should create a new activity and return 201 Created status with the correct data", async ({ request }) => {
        const newActivity = {
            title: "Activity POST",
            dueDate: 1748890712, // Future date for testing (Unix timestamp)
            completed: false
        };

        const postResponse = await request.post("activities", {
            data: newActivity
        });

        // --- POST Response Validations ---

        // 1. Status Code Validation:
        // For successful POSTs, we generally expect 200 OK or 201 Created.
        // This specific API returns 201 Created for resource creation.
        expect(postResponse.status()).toBe(201);

        // 2. Response Body Validation (Returned Payload):
        const responseBody = await postResponse.json();

        // 2.1. Validate that the response is not null/empty
        expect(responseBody).not.toBeNull();
        expect(Object.keys(responseBody).length).toBeGreaterThan(0);

        // 2.2. Validate the Structure of the Returned Object:
        // Ensures all expected properties are present
        expect(responseBody).toHaveProperty("id");
        expect(responseBody).toHaveProperty("title");
        expect(responseBody).toHaveProperty("dueDate");
        expect(responseBody).toHaveProperty("completed");

        // 2.3. Validate Data Types of Returned Properties:
        // Ensures types are correct
        expect(typeof responseBody.id).toBe("string"); // Assuming ID is a string based on recent observations of this API
        expect(typeof responseBody.title).toBe("string");
        expect(typeof responseBody.dueDate).toBe("number"); // Assuming dueDate is a number (timestamp)
        expect(typeof responseBody.completed).toBe("boolean");

        // 2.4. Validate the Values of Created Properties:
        // Very important: Checks if the data we sent was reflected in the creation
        // The ID is generated by the API, so we just check it's a valid generated ID (e.g., greater than 40)
        expect(Number(responseBody.id)).toBeGreaterThan(40);
        expect(responseBody.title).toBe(newActivity.title);
        expect(responseBody.completed).toBe(newActivity.completed);

        // For `dueDate`, the API might return with a different timezone or format.
        // It's safer to compare the dates after converting them.
        // Note: `new Date(timestamp)` expects milliseconds, so multiply by 1000 if your `dueDate` is in seconds.
        const sentDueDate = new Date(newActivity.dueDate * 1000).toISOString();
        const receivedDueDate = new Date(responseBody.dueDate * 1000).toISOString();
        expect(receivedDueDate).toBe(sentDueDate);

        // 3. Side Effect Validation (Optional, but Recommended):
        // In a real scenario, after creating a resource, you would perform a GET request for the newly created ID
        // to ensure the resource was persisted in the database.
        // For this API, as there's no real persistence, it's more of a concept.
        const getResponse = await request.get(`activities/${responseBody.id}`);

        expect(getResponse.status()).toBe(200); // Ensures it's possible to fetch the newly created resource
        const fetchedActivity = await getResponse.json();

        expect(fetchedActivity.id).toBe(responseBody.id);
        expect(fetchedActivity.title).toBe(newActivity.title);
        // Add more assertions for fetchedActivity if needed
    });

    test.skip("Should return 400 Bad Request when sending invalid data (e.g., empty title)", async ({ request }) => {
        const invalidActivity = {
            title: 123, // Invalid type for title
            dueDate: "", // Empty date (invalid format)
            completed: false
        };

        const response = await request.post(`activities`, {
            data: invalidActivity
        });

        // 1. Error Status Code Validation:
        expect(response.status()).toBe(400); // We expect a 400 Bad Request for invalid data

        // 2. Error Response Body Validation (if the API provides error messages):
        const errorBody = await response.json();
        expect(errorBody).toHaveProperty("errors");
        expect(typeof errorBody.errors).toBe("object");
        expect(errorBody.title).toContain("One or more validation errors occurred."); // This specific error message might vary

        const allErrors = Object.values(errorBody.errors).flat();
        const found = allErrors.some(msg => msg.includes("The JSON value could not be converted to System.DateTime"));
        expect(found).toBeTruthy();
    });

});